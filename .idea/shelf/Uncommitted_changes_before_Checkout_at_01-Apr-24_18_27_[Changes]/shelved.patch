Index: frontend/angular.json
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>{\r\n  \"$schema\": \"./node_modules/@angular/cli/lib/config/schema.json\",\r\n  \"version\": 1,\r\n  \"newProjectRoot\": \"projects\",\r\n  \"projects\": {\r\n    \"frontend\": {\r\n      \"projectType\": \"application\",\r\n      \"schematics\": {},\r\n      \"root\": \"\",\r\n      \"sourceRoot\": \"src\",\r\n      \"prefix\": \"app\",\r\n      \"architect\": {\r\n        \"build\": {\r\n          \"builder\": \"@angular-devkit/build-angular:application\",\r\n          \"options\": {\r\n            \"outputPath\": \"dist/frontend\",\r\n            \"index\": \"src/index.html\",\r\n            \"browser\": \"src/main.ts\",\r\n            \"polyfills\": [\r\n              \"zone.js\"\r\n            ],\r\n            \"tsConfig\": \"tsconfig.app.json\",\r\n            \"assets\": [\r\n              \"src/favicon.ico\",\r\n              \"src/assets\"\r\n            ],\r\n            \"styles\": [\r\n              \"src/styles.scss\"\r\n            ],\r\n            \"scripts\": [\r\n              \"node_modules/flowbite/dist/flowbite.js\"\r\n            ],\r\n            \"server\": \"src/main.server.ts\",\r\n            \"prerender\": true,\r\n            \"ssr\": {\r\n              \"entry\": \"server.ts\"\r\n            }\r\n          },\r\n          \"configurations\": {\r\n            \"production\": {\r\n              \"budgets\": [\r\n                {\r\n                  \"type\": \"initial\",\r\n                  \"maximumWarning\": \"500kb\",\r\n                  \"maximumError\": \"1mb\"\r\n                },\r\n                {\r\n                  \"type\": \"anyComponentStyle\",\r\n                  \"maximumWarning\": \"2kb\",\r\n                  \"maximumError\": \"4kb\"\r\n                }\r\n              ],\r\n              \"outputHashing\": \"all\"\r\n            },\r\n            \"development\": {\r\n              \"optimization\": false,\r\n              \"extractLicenses\": false,\r\n              \"sourceMap\": true\r\n            }\r\n          },\r\n          \"defaultConfiguration\": \"production\"\r\n        },\r\n        \"serve\": {\r\n          \"builder\": \"@angular-devkit/build-angular:dev-server\",\r\n          \"configurations\": {\r\n            \"production\": {\r\n              \"buildTarget\": \"frontend:build:production\"\r\n            },\r\n            \"development\": {\r\n              \"buildTarget\": \"frontend:build:development\"\r\n            }\r\n          },\r\n          \"defaultConfiguration\": \"development\"\r\n        },\r\n        \"extract-i18n\": {\r\n          \"builder\": \"@angular-devkit/build-angular:extract-i18n\",\r\n          \"options\": {\r\n            \"buildTarget\": \"frontend:build\"\r\n          }\r\n        },\r\n        \"test\": {\r\n          \"builder\": \"@angular-devkit/build-angular:karma\",\r\n          \"options\": {\r\n            \"polyfills\": [\r\n              \"zone.js\",\r\n              \"zone.js/testing\"\r\n            ],\r\n            \"tsConfig\": \"tsconfig.spec.json\",\r\n            \"assets\": [\r\n              \"src/favicon.ico\",\r\n              \"src/assets\"\r\n            ],\r\n            \"styles\": [\r\n              \"src/styles.scss\"\r\n            ],\r\n            \"scripts\": []\r\n          }\r\n        }\r\n      }\r\n    }\r\n  },\r\n  \"cli\": {\r\n    \"analytics\": false\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/frontend/angular.json b/frontend/angular.json
--- a/frontend/angular.json	
+++ b/frontend/angular.json	
@@ -32,9 +32,7 @@
             ],
             "server": "src/main.server.ts",
             "prerender": true,
-            "ssr": {
-              "entry": "server.ts"
-            }
+            "ssr": false
           },
           "configurations": {
             "production": {
Index: frontend/src/app/services/websocket.service.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import {Injectable, OnDestroy} from '@angular/core';\r\nimport {CompatClient, Stomp, StompSubscription} from '@stomp/stompjs';\r\nimport {WebConfig} from \"../config/Web.config\";\r\nimport {SendTemplate} from \"../sendTemplates/sendTemplate\";\r\n\r\n@Injectable({\r\n  providedIn: 'root'\r\n})\r\nexport class WebsocketService implements OnDestroy {\r\n  connectionStatus!: string;\r\n  private wsUrl = WebConfig.websocketUrl;\r\n\r\n  private connection: CompatClient | undefined = undefined;\r\n\r\n  private subscription: StompSubscription | undefined;\r\n\r\n  constructor() {\r\n    /*this.connection = Stomp.client(`ws://${this.wsUrl}`);\r\n    this.connection.connect({}, () => {\r\n    });*/\r\n  }\r\n\r\n  ngOnDestroy() {\r\n    if (this.subscription) {\r\n      this.subscription.unsubscribe();\r\n    }\r\n  }\r\n\r\n  async connectToWebSocket() {\r\n    var webSocket = new WebSocket(`ws://${this.wsUrl}`);\r\n    this.connection = Stomp.over(webSocket);\r\n    // this.connection = Stomp.client(`ws://${this.wsUrl}`);\r\n\r\n    this.connection.connect({}, () => {\r\n\r\n    });\r\n\r\n    if (this.connection?.connected) {\r\n      console.log('Connected to websocket');\r\n      this.connectionStatus = 'Connected';\r\n    } else {\r\n      console.error('Could not connect to websocket');\r\n      this.connectionStatus = 'Could not connect to websocket';\r\n    }\r\n  }\r\n\r\n  closeConnection() {\r\n    this.connection?.disconnect(() => {\r\n      this.connectionStatus = 'Disconnected';\r\n    });\r\n  }\r\n\r\n  sendMessage(destination: string, template: SendTemplate) {\r\n    if (this.connection && this.connection.connected) {\r\n      console.log('Sending message');\r\n      this.connection.send(destination, {}, JSON.stringify(template));\r\n    } else {\r\n      console.error('Websocket is not connected');\r\n    }\r\n  }\r\n\r\n  /*subscribe(callback: Function) {\r\n    this.stompClient.subscribe('/topic/public', (message: any) => {\r\n      // callback(JSON.parse(message.body));\r\n    });\r\n  }*/\r\n\r\n  public subscribe(destination: string, callback: Function): void {\r\n    if (this.connection) {\r\n      this.connection.connect({}, () => {\r\n        this.subscription = this.connection!.subscribe(destination, message => {\r\n          callback(JSON.parse(message.body))\r\n        });\r\n      });\r\n    }\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/frontend/src/app/services/websocket.service.ts b/frontend/src/app/services/websocket.service.ts
--- a/frontend/src/app/services/websocket.service.ts	
+++ b/frontend/src/app/services/websocket.service.ts	
@@ -3,6 +3,8 @@
 import {WebConfig} from "../config/Web.config";
 import {SendTemplate} from "../sendTemplates/sendTemplate";
 
+(global as any).WebSocket = require('ws');
+
 @Injectable({
   providedIn: 'root'
 })
@@ -27,7 +29,7 @@
   }
 
   async connectToWebSocket() {
-    var webSocket = new WebSocket(`ws://${this.wsUrl}`);
+    const webSocket = new WebSocket(`ws://${this.wsUrl}`);
     this.connection = Stomp.over(webSocket);
     // this.connection = Stomp.client(`ws://${this.wsUrl}`);
 
Index: frontend/src/app/components/auth/auth.component.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import {Component} from '@angular/core';\r\nimport {NgIf} from \"@angular/common\";\r\nimport {WebsocketService} from '../../services/websocket.service';\r\nimport {ChatTemplate} from \"../../sendTemplates/ChatTemplate\";\r\nimport {AuthTemplate} from \"../../sendTemplates/auth/AuthTemplate\";\r\nimport {FormsModule} from \"@angular/forms\";\r\n\r\n@Component({\r\n  selector: 'app-auth',\r\n  standalone: true,\r\n  imports: [\r\n    NgIf,\r\n    FormsModule\r\n  ],\r\n  templateUrl: './auth.component.html',\r\n  styleUrl: './auth.component.scss'\r\n})\r\nexport class AuthComponent {\r\n  isLogin = true;\r\n  username = '';\r\n  password = '';\r\n  passwordRep = '';\r\n\r\n  constructor(protected webSocketService: WebsocketService) {\r\n    webSocketService.connectToWebSocket().then(r => {\r\n      this.subscribe()\r\n    });\r\n  }\r\n\r\n  subscribe(){\r\n    this.webSocketService.subscribe('/topic/auth', (message: any) => {\r\n      console.log(message.body);\r\n    });\r\n  }\r\n\r\n  login() {\r\n\r\n    if(this.username === '' || this.password === ''){\r\n      //TODO: show error message\r\n\r\n      return;\r\n    }\r\n\r\n    this.webSocketService.sendMessage(\r\n      '/app/auth/login',\r\n      new AuthTemplate(this.username, this.password));\r\n  }\r\n\r\n  register() {\r\n    if(this.username === '' || this.password === '' || this.password !== this.passwordRep){\r\n\r\n      return;\r\n    }\r\n\r\n\r\n    this.webSocketService.sendMessage(\r\n      '/app/auth/register',\r\n      new AuthTemplate(this.username, this.password));\r\n  }\r\n\r\n  switchMode() {\r\n    this.isLogin = !this.isLogin;\r\n    this.username = '';\r\n    this.password = '';\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/frontend/src/app/components/auth/auth.component.ts b/frontend/src/app/components/auth/auth.component.ts
--- a/frontend/src/app/components/auth/auth.component.ts	
+++ b/frontend/src/app/components/auth/auth.component.ts	
@@ -35,6 +35,7 @@
 
   login() {
 
+    console.log("login")
     if(this.username === '' || this.password === ''){
       //TODO: show error message
 
Index: frontend/src/app/components/index/index.component.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import {Component, OnInit} from '@angular/core';\r\nimport {WebsocketService} from \"../../services/websocket.service\";\r\nimport {FormsModule} from \"@angular/forms\";\r\nimport {ChatTemplate} from \"../../sendTemplates/ChatTemplate\";\r\n\r\n@Component({\r\n  selector: 'app-index',\r\n  standalone: true,\r\n  imports: [\r\n    FormsModule\r\n  ],\r\n  templateUrl: './index.component.html',\r\n  styleUrl: './index.component.scss'\r\n})\r\nexport class IndexComponent implements OnInit {\r\n  message!: string;\r\n  name!: string;\r\n  isNameDisabled = false;\r\n\r\n  constructor(protected webSocketService: WebsocketService) {\r\n    this.connect();\r\n  }\r\n\r\n  ngOnInit() {\r\n  }\r\n\r\n  sendMessage() {\r\n    this.webSocketService.sendMessage(\r\n      '/app/chat.sendMessage',\r\n      new ChatTemplate(this.name, this.message,\r\n        new Date().toLocaleDateString(), new Date().toLocaleTimeString()));\r\n    this.message = '';\r\n    this.isNameDisabled = true;\r\n  }\r\n\r\n  subscribe() {\r\n    this.webSocketService.subscribe('/topic/public', (message: any) => {\r\n      console.log(message.body);\r\n    });\r\n  }\r\n\r\n  async connect() {\r\n    this.webSocketService.connectToWebSocket().then(() => {\r\n      this.subscribe();\r\n    }, (error) => {\r\n      console.error(\"Connection failed\");\r\n    });\r\n\r\n  }\r\n\r\n  disconnect() {\r\n    this.webSocketService.closeConnection();\r\n  }\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/frontend/src/app/components/index/index.component.ts b/frontend/src/app/components/index/index.component.ts
--- a/frontend/src/app/components/index/index.component.ts	
+++ b/frontend/src/app/components/index/index.component.ts	
@@ -36,6 +36,7 @@
   subscribe() {
     this.webSocketService.subscribe('/topic/public', (message: any) => {
       console.log(message.body);
+      console.log(message);
     });
   }
 
Index: frontend/server.ts
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import { APP_BASE_HREF } from '@angular/common';\r\nimport { CommonEngine } from '@angular/ssr';\r\nimport express from 'express';\r\nimport { fileURLToPath } from 'node:url';\r\nimport { dirname, join, resolve } from 'node:path';\r\nimport bootstrap from './src/main.server';\r\n\r\n// The Express app is exported so that it can be used by serverless Functions.\r\nexport function app(): express.Express {\r\n  const server = express();\r\n  const serverDistFolder = dirname(fileURLToPath(import.meta.url));\r\n  const browserDistFolder = resolve(serverDistFolder, '../browser');\r\n  const indexHtml = join(serverDistFolder, 'index.server.html');\r\n\r\n  const commonEngine = new CommonEngine();\r\n\r\n  server.set('view engine', 'html');\r\n  server.set('views', browserDistFolder);\r\n\r\n  // Example Express Rest API endpoints\r\n  // server.get('/api/**', (req, res) => { });\r\n  // Serve static files from /browser\r\n  server.get('*.*', express.static(browserDistFolder, {\r\n    maxAge: '1y'\r\n  }));\r\n\r\n  // All regular routes use the Angular engine\r\n  server.get('*', (req, res, next) => {\r\n    const { protocol, originalUrl, baseUrl, headers } = req;\r\n\r\n    commonEngine\r\n      .render({\r\n        bootstrap,\r\n        documentFilePath: indexHtml,\r\n        url: `${protocol}://${headers.host}${originalUrl}`,\r\n        publicPath: browserDistFolder,\r\n        providers: [{ provide: APP_BASE_HREF, useValue: baseUrl }],\r\n      })\r\n      .then((html) => res.send(html))\r\n      .catch((err) => next(err));\r\n  });\r\n\r\n  return server;\r\n}\r\n\r\nfunction run(): void {\r\n  const port = process.env['SSR_PORT'] || 4000;\r\n\r\n  // Start up the Node server\r\n  const server = app();\r\n  server.listen(port, () => {\r\n    console.log(`Node Express server listening on http://localhost:${port}`);\r\n  });\r\n}\r\n\r\nrun();\r\n
===================================================================
diff --git a/frontend/server.ts b/frontend/server.ts
--- a/frontend/server.ts	
+++ b/frontend/server.ts	
@@ -45,11 +45,12 @@
 
 function run(): void {
   const port = process.env['SSR_PORT'] || 4000;
+  const ip = process.env['SSR_IP'] || 'localhost';
 
   // Start up the Node server
   const server = app();
   server.listen(port, () => {
-    console.log(`Node Express server listening on http://localhost:${port}`);
+    console.log(`Node Express server listening on http://${ip}:${port}`);
   });
 }
 
